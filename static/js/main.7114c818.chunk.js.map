{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","vote","title","poster_path","overview","vote_average","className","src","alt","App","useState","movies","setMovies","searchWord","setSearchWord","useEffect","getMovies","API","fetch","then","res","json","data","console","log","results","onSubmit","e","preventDefault","value","onChange","target","type","placeholder","length","map","movie","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOA8BeA,G,MAjBD,SAAC,GAAD,IAVSC,EAUNC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,aAAjC,OACZ,yBAAKC,UAAU,SACb,yBAAKC,IAbY,mCAaQJ,EAAaK,IAAKN,IAC3C,yBAAKI,UAAU,iBACb,4BAAKJ,GACL,0BAAMI,UAAS,eAfEL,EAeqBI,EAdtCJ,GAAQ,EACH,QACEA,GAAQ,EACV,SAEA,SAUFI,IAIL,yBAAKC,UAAU,iBACb,8CACA,2BAAIF,OCyCKK,MAvDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAGbC,qBAAU,WACRC,EATF,yHAUG,IAEH,IAAMA,EAAY,SAACC,GACjBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZV,EAAUU,EAAKG,aAerB,OACE,6BACE,gCACE,wBAAInB,UAAU,SAAd,aACA,0BAAMoB,SAhBW,SAACC,GACtBA,EAAEC,iBACEf,IACFG,EApBJ,6FAoB6BH,GACzBC,EAAc,OAaV,2BACER,UAAU,SACVuB,MAAOhB,EACPiB,SAZa,SAACH,GACtBb,EAAca,EAAEI,OAAOF,QAYfG,KAAK,OACLC,YAAY,aAIlB,yBAAK3B,UAAU,mBACZK,EAAOuB,OAAS,GACfvB,EAAOwB,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,QAEpD,gCACE,yBACE9B,UAAU,aACVC,IAAI,uIC/CMgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.7114c818.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MOVIE_IMAGES = \"https://image.tmdb.org/t/p/w1280\";\r\nconst setGradeClass = (vote) => {\r\n  if (vote >= 8) {\r\n    return \"green\";\r\n  } else if (vote >= 6) {\r\n    return \"orange\";\r\n  } else {\r\n    return \"red\";\r\n  }\r\n};\r\n\r\nconst Movie = ({ title, poster_path, overview, vote_average }) => (\r\n  <div className=\"movie\">\r\n    <img src={MOVIE_IMAGES + poster_path} alt={title} />\r\n    <div className=\"movie-details\">\r\n      <h3>{title}</h3>\r\n      <span className={`tag ${setGradeClass(vote_average)}`}>\r\n        {vote_average}\r\n      </span>\r\n    </div>\r\n\r\n    <div className=\"movie-summary\">\r\n      <h2>Movie summary:</h2>\r\n      <p>{overview}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Movie;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./components/Movie\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst TOP_MOVIES_API =\n  \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=e740be3713bb5462336f106655881117&page=1\";\n\nconst SEARCH_QUERY =\n  \"https://api.themoviedb.org/3/search/movie?&api_key=e740be3713bb5462336f106655881117&query=\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [searchWord, setSearchWord] = useState(\"\");\n  useEffect(() => {\n    getMovies(TOP_MOVIES_API);\n  }, []);\n\n  const getMovies = (API) => {\n    fetch(API)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setMovies(data.results);\n      });\n  };\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    if (searchWord) {\n      getMovies(SEARCH_QUERY + searchWord);\n      setSearchWord(\"\");\n    }\n  };\n\n  const handleOnChange = (e) => {\n    setSearchWord(e.target.value);\n  };\n\n  return (\n    <div>\n      <header>\n        <h2 className=\"title\">Movie App</h2>\n        <form onSubmit={handleOnSubmit}>\n          <input\n            className=\"search\"\n            value={searchWord}\n            onChange={handleOnChange}\n            type=\"text\"\n            placeholder=\"Search\"\n          ></input>\n        </form>\n      </header>\n      <div className=\"movie-container\">\n        {movies.length > 0 &&\n          movies.map((movie) => <Movie key={movie.id} {...movie} />)}\n      </div>\n      <footer>\n        <img\n          className=\"img-footer\"\n          src=\"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg\"\n        ></img>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}